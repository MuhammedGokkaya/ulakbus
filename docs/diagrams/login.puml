@startuml
autonumber

title __Simple__ **communication** example

actor "User\n(Browser)" as brw
boundary "Ext. HA Proxy" as ehp
participant "Gunicorn → Falcon" as fal
participant "Zengine" as zen
control "SpiffWorkflow" as wfe
participant "ZAERP Modules" as modls
participant "Zato Service" as zato
entity "Pyoko DAL" as pyoko
database "Redis" as c
boundary "Int. HA Proxy" as ihp
database "Riak" as riak


brw -> ehp: POST:authenticate_user

ehp -> fal : POST:authenticate_user
note over fal #lightgreen : Gunicorn and Falcon\n combined for brevity

fal -> zen :dispatch_request(authenticate_user)

zen -> wfe :start_or_resume_wf\n(authenticate_user, context)

wfe -> wfe :execute READY \n tasks with context

note left : "context" holds request\n  and response objects

wfe -> modls :authenticate_user(context)


modls -\\ ihp : POST:192.168.0.0/16/authenticate_user/?json_payload

ihp -\\ zato : POST:192.168.0.0/16/authenticate_user/?json_payload

zato -> pyoko  : get_authenticated_user(STD_ID, PASSWD)
note left : Auth service can be configured\n for different authentication sources

pyoko -> c : get_from_cache('email_to_id'+email)
pyoko <--  c: found
alt cache miss
pyoko <--  c: not found
pyoko -> ihp  :bucket: user, \n query(email=email)
ihp -> riak :bucket: user, \n query(email=email)
ihp <-- riak: found
pyoko <-- ihp : found
end
zato <-- pyoko : return authenticated_user

ihp //-- zato : return authenticated_user

modls //-- ihp : return authenticated_user

wfe <-- modls  : return authenticated_user
wfe --> wfe  : Set WF data: is_auth=bool(auth_user)
wfe --> wfe  : mark_current_task(COMPLETE)
wfe --> wfe  : XOR:is_auth==True → goto next page
note left #lightgreen: if user authenticated\ngoto previously requested page\n which requires auth. user

zen <--  wfe: return authentication data
zen --> zen : save(serialize(workflow))
fal <--  zen : return json response

fal -> fal : set authentication cookie

ehp <-- fal  : return json response

brw <-- ehp : return json response

@enduml
