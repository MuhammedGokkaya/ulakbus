@startuml

skinparam classAttributeFontName Monospaced
skinparam classBackgroundColor #EFF2FB
skinparam classBorderColor #D8D8D8
skinparam packageBorderColor #BDBDBD
skinparam classArrowColor #0B615E
skinparam shadowing false

'skinparam monochrome true
'skinparam nodesep 100
'skinparam ranksep 100
'note "All <color:black><b> (M)odels</b></color> extends <b>pyoko.Model</b> class" as N #orchid
title
<size:24>Entity Based Model Diagram</size>
( All Models extends <b>pyoko.Model</b> class )
endtitle
'legend left
'n..*     n or more instances
'n..m    Min n, Max m instances
'endlegend






package auth{

class User <<(M,orchid)>>{
|_ id                  Int
|_ **IdentityInfo(Model)**
   |_  tckno           string
   |_  name            string
   |_  surname         string
   |_  birth_date      Date
   |_  birth_place     Date
   |_  neighborhood    string
   |_  father_name     String
   |_  mother_name     String
   |_  gender          String
   |_  marital_status  String
   |_  town_code       Int
   |_  city            Int
   |_  blood_type      String
   |_  former_surname  String
|_ **ContactInfo(Model)**
   |_  home_phone      String
   |_  work_phone      String
   |_  mobile_phone    String
   |_  address_pri     String
   |_  address_sec     String
   |_  postal_code     Int
   |_  primary_email   String
   |_  secondary_email String
   |_  website         String
--
authenticate()
get_permissions()

}
class AbstractRole<<(M,orchid)>>{
permissions     FK(**Permissions**)
id              Int
name            String
--
}
class Role<<(M,orchid)>>{
abstract_role   FK(**AbstractRole**)
user            FK(**User**)
unit            FK(**Unit**)
permissions     FK(**Permissions**)
active          Boolean
start_date      Date
end_date        Date
--
}
class Permission<<(M,orchid)>>{
name            String
code            String
}
}
class Employee <<(M,orchid)>>{
service_records      **ServiceRecords()**
user                 FK(**User**)
registry_code        String
status_code          Int
labour_class_code    String
health_status        String
degree_of_disabled   String
tax_no               String
retirement_no        String
retirement_date      Date
address_city_code    String
address_town_code    String
country_code         String
min_degree           Int
min_grade            Int
nomination           String
--
}
class ServiceRecord<<(M,orchid)>>{
employee                     FK(**Employee**)
start_date                   Date
end_date                     Date
task                         String
code                         String
wages                        Float
salary                       Float
class                        String
staff                        String
payment_degree               Int
payment_grade                Int
payment_indicator            Int
earned_salary_grade          Int
retirement_degree            Int
retirement_grade             Int
retirement_indicator         Int
reason_code                  String
organization_approval_date   Date
--
}
class Unit<<(M,orchid)>>{
type        String
name        String
parent      FK(**Unit**)
--
people      **Role()**
}

class Lecturer<<(M,orchid)>>{
employe         FK(**Employee**)
name            String
type            [String]
--
note: non-employee (guest) lecturers data
will be stored here
--
}

class Curriculum<<(M,orchid)>>{
unit        FK(**Unit**)
period      Int
--
lectures    **BaseLecture()**

}


'class StudentTimeTable<<(M,orchid)>>{
'student         FK(**Student**)
'timetable       FK(**TimeTable**)
'week_day        Int
'hours           [Int]
'}

class Location<<(M,orchid)>>{
code            String
building        String
--
lectures        **Lecture()**
}

class Lecture<<(M,orchid)>>{
lecturer    FK(**Lecturer**)
base        FK(**BaseLecture**)
--
}
class BaseLecture<<(M,orchid)>>{
name     String
code     String
credit   String
--
}
class TimeTable<<(M,orchid)>>{
lecture         FK(**Lecture**)
location        FK(**Location**)
week_day        Int
day_hour        Int
hours           [Int]
--
}



class Student <<(M,orchid)>> {
lectures            FK(**Lecture**)
timetable           FK(**TimeTable**)
role                FK(**Role**)
timetable       FK(**TimeTable**)
**Exam(ListModel**
|_ type              String
|_ date              Date
|_ point             Int
**Attendance(ListModel)**
|_ attended          Boolean
|_ date              Date
|_ hour              Int
**TimeTable(ListModel)**
--
get_draft_registrations()
}

Lecture -- Lecturer
Lecture -- Student
Unit "0..*" o-- "1" Curriculum
BaseLecture -- Curriculum
BaseLecture -- Lecture

Unit "0..*" -- "1" Role
Unit "0..1" --o "0..*" Unit
User "0..*" o-- "1" Role
Lecturer --o Employee
Lecture --o TimeTable
Role "1" --o "0..*" AbstractRole
AbstractRole "0..*" o-- "0..*" Permission
Role "0..*" o-- "0..*" Permission

User "1" -- "1" Student
User "1" -- "1" Employee
TimeTable "1" o-- "0..*" Location
Unit "0..*" o-- "1..*" Location
Employee "1..*" --o ServiceRecord
TimeTable "0..*" --o "0..*" Student

' XXXXXXXXXXXX
' Unit "0..*" -- "0..*" Employee
' Student "1..*" --o "0..*" Curriculum
' XXXXXXXXXXXX
@enduml
