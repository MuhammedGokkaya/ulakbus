@startuml
autonumber

title Generic Request to Response Sequence Diagram

'skinparam defaultFontSize 16
skinparam sequenceArrowFontSize 16
skinparam NoteBackgroundColor #ffffff
skinparam NoteBorderColor #cccccc
skinparam sequenceArrowColor #black
skinparam sequenceLifeLineBorderColor #gray
skinparam actorBackgroundColor #E0ECF8
skinparam actorBorderColor #81BEF7
skinparam participantBackgroundColor #E0ECF8
skinparam participantBorderColor #81BEF7


actor "User\n(Browser)" as brw
boundary "Ext. HA Proxy" as ehp
participant "Gunicorn / Falcon" as fal
participant "Zengine" as zen
control "SpiffWorkflow" as wfe
participant "ZAERP Modules" as modls
participant "Zato Service" as zato
entity "Pyoko DAL" as pyoko
database "Redis" as c
boundary "Int. HA Proxy" as ihp
database "Riak" as riak


brw -> ehp: POST request
note over fal: Gunicorn and Falcon\n combined for brevity

ehp -> fal : POST request

fal -> zen :dispatch_request(context)
note over zen : <b>context</b> stores current workflow name, \nrequest and response objects

zen -> wfe :start_or_resume_wf\n( context)

wfe -> wfe :execute READY \n tasks with context


wfe -> modls :job_specific_call(context)


modls -\\ ihp : POST:192.168.0.0/16/service_name/?json_payload

ihp -\\ zato : POST:192.168.0.0/16/service_name/?json_payload
activate zato
zato -> pyoko  : get_object()

pyoko -> c : get_from_cache()

alt
pyoko <--  c: found
else cache miss

pyoko <--  c: not found
pyoko -> ihp
ihp -> riak
ihp <-- riak: found
pyoko <-- ihp : found
pyoko -> c: cache object

end

zato <-- pyoko : return object

ihp //-- zato : return object
deactivate zato
modls //-- ihp : return object

wfe <-- modls  : return object

wfe --> wfe  : mark_current_task\n(COMPLETE)


zen <--  wfe: return json data
zen --> zen : save(serialize(workflow))
fal <--  zen : return json response

ehp <-- fal  : return json response

brw <-- ehp : return json response

@enduml
