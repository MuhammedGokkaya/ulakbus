{
// configuration
autonumber = True;
//activation = None;
default_note_color = lightblue;
edge_length = 180;
span_height = 3;

// nodes
brw[label="User\n(Browser)"];
ehp[label="Ext. HA Proxy"];
fal[label="Gunicorn → Falcon"];
zen[label="Zengine"];
wfe[label="SpiffWorkflow"];
modls[label="ZAERP Modules"];
zato[label="Zato Service"];
pyoko[label="Pyoko DAL"];
c[label="Redis"];
i[label="Int. HA Proxy"];
r[label="Riak"]

// steps
brw -> ehp  [label = "POST:authenticate_user"];
ehp -> fal [label = "POST:authenticate_user", note="Gunicorn and Falcon\n combined for brevity"];
fal -> zen [label = "dispatch_request(authenticate_user)"];
zen -> wfe [label = "start_or_resume_wf\n(authenticate_user, context)"];
wfe -> wfe [label = "execute READY \n tasks with context", leftnote="\"context\" holds request\n  and response objects", notecolor=lightgreen];
wfe -> modls [label = "authenticate_user(context)", note="zaerp.views.authentication.authenticate_user"];
modls -> i -> zato [diagonal, label = "POST:192.168.0.0/16/authenticate_user/?json_payload"]
zato -> pyoko [label="get_authenticated_user(STD_ID, PASSWD)", leftnote="Auth service can be configured\n for different authentication sources", notecolor=lightgreen]

alt{
    pyoko => c [label ="get_from_cache('email_to_id'+email)", return="None", note="Not found in cache "]
    pyoko => i => r [label ="bucket: user, \n query(email=email)", return="found"]
    pyoko => c [label="cache user object", return="ok"]
}

zato <-- pyoko [label="return authenticated_user"]

modls <-- i <-- z[diagonal, label="return authenticated_user"]
wfe <-- modls [label="return authenticated_user"]
wfe --> wfe [label="Set WF data: is_auth=bool(auth_user)"]
wfe --> wfe [label="mark_current_task(COMPLETE)"]
wfe --> wfe [label="XOR:is_auth==True → goto next page", leftnote="if user authenticated\ngoto previously requested page\n which requires auth. user", notecolor=lightgreen]
zen <-- wfe [label="return authentication data"]
zen --> zen [label="save(serialize(workflow))"]
fal <-- zen  [label="return json response"]
fal -> fal [label="set authentication cookie"]
brw <-- ehp <-- fal [label="return json response"]

}
